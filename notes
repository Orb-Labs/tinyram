    test/TinyRAM/Spec/CoqTinyRAMSpec.hs:89
  âœ— 1 TinyRAM.Spec.CoqTinyRAMSpec.coq-tinyram.produces the same result as the Haskell TinyRAM emulator
      Failled after 1 tests
      Generated: (Params {wordSize = WordSize {unWordSize = 8}, registerCount = RegisterCount {unRegisterCount = 2}},MachineState {programCounter = ProgramCounter {unProgramCounter = Address {unAddress = Word {unWord = 254}}}, registerValues = RegisterValues {unRegisterValues = fromList [(Register {unRegister = 0},Word {unWord = 32}),(Register {unRegister = 1},Word {unWord = 168})]}, conditionFlag = Flag {unFlag = 1}, memoryValues = <MemoryValues>, programMemoryValues = <ProgramMemoryValues>, primaryInput = InputTape {unInputTape = []}, auxiliaryInput = InputTape {unInputTape = []}})
      Generated: MaxSteps {unMaxSteps = 314}
      Expected these values to be equal:
      Actual:   Just Word { unWord = 1 }
      Expected: Nothing
  
 
  Passed:                       1
  Failed:                       1
  Longest test:                 run.TinyRAM.Spec.RunSpec.produces the same result when split into multiple runs
  Longest test took:            1.80 seconds, which is 95% of total runtime
  Sum of test runtimes:         1.88 seconds
  Test suite took:              1.80 seconds
 
[nix-develop-tinyram:] cat /tmp/run-coq-tinyram-pr
Display all 260 possibilities? (y or n)
[nix-develop-tinyram:] cat /tmp/run-coq-tinyram-prog--7042907830667354017

